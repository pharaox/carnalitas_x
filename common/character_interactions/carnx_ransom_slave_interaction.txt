# Demand ransom for one of your slaves from another ruler who is their relative.
# Scopes: actor is the slave owner, recipient is the payer, seconary_recipient is the slave.
carnx_ransom_slave_interaction = {
	category = carnx_interaction_category_slavery
	desc = carnx_ransom_slave_interaction_desc
	interface_priority = 20
	common_interaction = yes
	needs_recipient_to_open = yes
	icon = carnx_broken_chain

	send_name = carnx_ransom_slave_interaction

	notification_text = OFFER_RANSOM_PROPOSAL

	ai_min_reply_days = 4
	ai_max_reply_days = 9

	populate_recipient_list = {
		scope:actor = {
			every_relation = {
				type = slave
				limit = {
					carnx_slave_can_be_freed_trigger = yes
					carnx_slave_can_be_ransomed_by_trigger = { CHARACTER = scope:recipient }
					carnx_character_can_ransom_slave_trigger = { CHARACTER = scope:recipient }
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		NOT = { has_game_rule = carn_slavery_content_disabled }
		NOT = { scope:actor = scope:recipient }
		trigger_if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:recipient = {
				carnx_valid_payer_or_owner_trigger = { PARTY = scope:actor }
			}
		}
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:actor = {
				has_relation_slave = scope:secondary_recipient
			}
			scope:secondary_recipient = {
				carnx_character_can_ransom_slave_trigger = { CHARACTER = scope:recipient }
			}
		}
		trigger_else = {
			scope:actor = {
				any_relation = {
					type = slave
					carnx_character_can_ransom_slave_trigger = { CHARACTER = scope:recipient }
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			carnx_can_start_interaction_trigger = yes
		}
		scope:recipient = {
			carnx_can_demand_ransom_slave_from_trigger = { PARTY = scope:actor }
		}
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				carnx_slave_can_be_freed_trigger = yes
				carnx_slave_can_be_ransomed_by_trigger = { CHARACTER = scope:recipient }
			}
		}
	}

	# Ask recipient to pay the full price
	send_option = {
		is_shown = {
			trigger_if = {
				limit = { exists = scope:secondary_recipient }
				scope:recipient = {
					save_temporary_scope_as = payer
					gold >= scope:secondary_recipient.carnx_slave_ransom_cost_value
				}
			}
			trigger_else = {
				scope:recipient.gold > 0
			}
		}
		flag = gold
		localization = "RANSOM_GOLD_OPTION"
	}

	# Ask recipient to pay what they have
	send_option = {
		is_shown = {
			trigger_if = {
				limit = { exists = scope:secondary_recipient }
				scope:recipient = {
					save_temporary_scope_as = payer
					gold < scope:secondary_recipient.carnx_slave_ransom_cost_value
					gold > 0
				}
			}
			trigger_else = {
				always = no
			}
		}
		flag = current_gold
		localization = "RANSOM_CURRENT_GOLD_OPTION"
	}

	# Ask recipient for a favor
	send_option = {
		is_shown = {
			always = yes
		}
		is_valid = {
			scope:actor = {
				can_add_hook = {
					target = scope:recipient
					type = favor_hook
				}
			}
		}
		flag = favor
		localization = "RANSOM_FAVOR_OPTION"
	}

	send_options_exclusive = yes

	localization_values = {
		RANSOM_COST = carnx_scope_secondary_recipient_slave_ransom_cost_value
		CURRENT_GOLD = scope:recipient.gold
	}

	on_send = {
		scope:actor = { save_scope_as = owner }
		scope:secondary_recipient = { save_scope_as = slave }
		scope:recipient = { save_scope_as = payer }
		scope:slave = {
			carnx_add_ransom_slave_variables_effect = yes
		}
	}

	on_accept = {
		scope:actor = { save_scope_as = owner }
		scope:secondary_recipient = { save_scope_as = slave }
		scope:recipient = { save_scope_as = payer }
		carnx_ransom_slave_interaction_effect = yes
		scope:slave = {
			carnx_remove_ransom_slave_variables_effect = yes
		}
	}

	on_decline = {
		# If a player declines this ransom offer, wait 10 years before sending another one
		if = {
			limit = { scope:recipient = { is_ai = no } }
			scope:secondary_recipient = {
				add_character_flag = {
					flag = character_ransom_refused_by_player
					years = 10
				}
			}
		}

		# Trigger notification event
		scope:actor = {
			trigger_event = char_interaction.0131
		}

		scope:actor = { save_scope_as = owner }
		scope:secondary_recipient = { save_scope_as = slave }
		scope:recipient = { save_scope_as = payer }
		scope:slave = {
			carnx_remove_ransom_slave_variables_effect = yes
		}
	}

	auto_accept = no

	ai_accept = {
		base = 0

		# Asked for gold (0 to -50)
		modifier = {
			OR = {
				scope:gold = yes
				scope:current_gold = yes
			}
			add = {
				value = -25
				add = {
					value = ai_greed
					multiply = -0.25
				}
			}
			desc = carnx_reluctant_to_spend_gold_reason
		}

		# Asked for a favor (-50 or -100)
		modifier = {
			scope:favor = yes
			scope:recipient.top_liege = scope:actor.top_liege
			add = -100
			desc = GAIN_HOOK_NEGATIVE_REASON
		}
		modifier = {
			scope:favor = yes
			NOT = { scope:recipient.top_liege = scope:actor.top_liege }
			add = -50
			desc = GAIN_HOOK_NEGATIVE_REASON
		}

		# Avoid spending money if at war (-50)
		modifier = {
			is_at_war = yes
			add = -50
			desc = IS_AT_WAR_REASON
		}

		# Opinion of slave (-25 to 25 depending on opinion)
		opinion_modifier = {
			trigger = {
				NOT = { scope:recipient = scope:secondary_recipient }
			}
			who = scope:recipient
			opinion_target = scope:secondary_recipient
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		# Compassion (-25 to 25 depending on compassion)
		ai_value_modifier = {
			ai_compassion = 0.25
		}

		# Slavery attitude
		# Liberators more likely to offer ransom, slavers less likely
		modifier = {
			OR = {
				has_character_modifier = carnx_slavery_attitude_liberator_modifier
			}
			add = carnx_ai_positive_attitude_impact_value
			desc = carnx_slavery_attitude_reason
		}
		modifier = {
			OR = {
				has_character_modifier = carnx_slavery_attitude_slaver_modifier
			}
			add = carnx_ai_negative_attitude_impact_value
			desc = carnx_slavery_attitude_reason
		}

		# Family and relations (25 to 100 depending on how close the relation)
		# Eager to pay ransom for family and relations
		carnx_family_and_relations_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = 25
		}

		# Lacking councillors, court positions, knights, or commanders (PIV for each skill, aptitude, or trait above cutoff)
		carnx_lacking_councillors_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_skill_impact_halved_value
		}
		carnx_lacking_court_positions_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_aptitude_impact_halved_value
		}
		carnx_lacking_knights_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_prowess_impact_halved_value
		}
		carnx_lacking_commanders_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_cs_impact_halved_value
		}

		# Claims (PIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_claims_impact_halved_value
		}

		# Execute reason, rival, cheating spouse (-75) or nemesis (-150)
		carnx_execute_reason_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = -75
		}

		# Opinion of actor
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			has_relation_rival = scope:actor
			add = -100
			desc = ACTOR_RIVAL_TO_ME_REASON
		}
		modifier = {
			has_relation_nemesis = scope:actor
			add = -200
			desc = ACTOR_NEMESIS_TO_ME_REASON
		}

		# Intimidated or cowed by actor
		modifier = {
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
			add = carnx_intimidated_reason_value
			desc = INTIMIDATED_REASON
		}
		modifier = {
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
			add = carnx_cowed_reason_value
			desc = COWED_REASON
		}
	}

	ai_targets = {
		ai_recipients = liege
		ai_recipients = vassals
		ai_recipients = peer_vassals
		ai_recipients = neighboring_rulers
	}

	ai_frequency = 24

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		# Offerred gold (0 to 50)
		modifier = {
			OR = {
				scope:gold = yes
				scope:current_gold = yes
			}
			scope:recipient = {
				save_temporary_scope_as = payer
				gold >= scope:secondary_recipient.carnx_slave_ransom_cost_value
			}
			add = 50
		}
		modifier = {
			OR = {
				scope:gold = yes
				scope:current_gold = yes
			}
			scope:recipient = {
				save_temporary_scope_as = payer
				gold < scope:secondary_recipient.carnx_slave_ransom_cost_value
				gold >= scope:secondary_recipient.carnx_slave_half_ransom_cost_value
			}
			add = {
				value = 25
				add = {
					value = ai_greed
					multiply = -0.25
				}
			}
		}
		modifier = { # for clarification
			OR = {
				scope:gold = yes
				scope:current_gold = yes
			}
			scope:recipient = {
				save_temporary_scope_as = payer
				gold < scope:secondary_recipient.carnx_slave_half_ransom_cost_value
			}
			add = 0
		}

		# Offerred a favor (0 or 50)
		modifier = {
			scope:favor = yes
			scope:recipient.top_liege = scope:actor.top_liege
			add = 50
		}
		modifier = {
			scope:favor = yes
			NOT = { scope:recipient.top_liege = scope:actor.top_liege }
			add = 0
		}

		# Slave recently bought
		modifier = {
			scope:secondary_recipient = {
				has_character_flag = carnx_slave_recently_bought
			}
			add = -100
		}

		# Opinion of slave (-25 to 25 depending on opinion)
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:secondary_recipient }
			}
			who = scope:actor
			opinion_target = scope:secondary_recipient
			multiplier = 0.25
		}

		# Compassion (-25 to 25 depending on compassion)
		ai_value_modifier = {
			ai_compassion = 0.25
		}

		# Slavery crime or shunned by faith
		modifier = {
			carnx_is_slavery_crime_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_positive_crime_impact_reduced_value
		}
		modifier = {
			carnx_is_slavery_shunned_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_positive_shunned_impact_reduced_value
		}

		# Additional slavery impact (laws, culture, etc.)
		carnx_slavery_modifier = {
			SLAVE = scope:secondary_recipient
			ACTION = flag:demand_ransom
		}

		# Slavery attitude
		# Liberators more likely to demand ransom, slavers less likely
		modifier = {
			OR = {
				has_character_modifier = carnx_slavery_attitude_liberator_modifier
			}
			add = carnx_ai_positive_attitude_impact_value
		}
		modifier = {
			OR = {
				has_character_modifier = carnx_slavery_attitude_slaver_modifier
			}
			add = carnx_ai_negative_attitude_impact_value
		}

		# Family and relations (-25 to -100 depending on how close the relation)
		# Reluctant to ransom family and relations, wants to free them instead
		carnx_family_and_relations_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = -25
		}

		# Employed as councillor (NIV doubled), court position, knight / commander, or in some other way (NIV)
		carnx_employed_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_employed_impact_halved_value
		}

		# Lacking councillors, court positions, knights, or commanders (NIV for each skill, aptitude, or trait above cutoff)
		carnx_lacking_councillors_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_skill_impact_halved_value
		}
		carnx_lacking_court_positions_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_aptitude_impact_halved_value
		}
		carnx_lacking_knights_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_prowess_impact_halved_value
		}
		carnx_lacking_commanders_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_cs_impact_halved_value
		}

		# Claims (NIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_claims_impact_halved_value
		}

		# Attraction (0 to NIV depending on attraction, doubled for lustful, halved for chaste)
		carnx_attraction_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_attraction_impact_halved_value
		}

		# Female (NIV if a visibly fertile female)
		carnx_female_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_female_impact_halved_value
		}

		# Age (up to PIV depending on age)
		carnx_age_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_age_impact_halved_value
		}

		# Execute reason, rival, cheating spouse (-75) or nemesis (-150)
		carnx_execute_reason_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = -75
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			has_relation_rival = scope:recipient
			add = -100
		}
		modifier = {
			has_relation_nemesis = scope:recipient
			add = -200
		}

		# Don't send empty offers
		modifier = {
			NOR = {
				scope:gold = yes
				scope:current_gold = yes
				scope:favor = yes
			}
			factor = 0
		}

		# Don't annoy players
		modifier = {
			scope:recipient = { is_ai = no }
			OR = {
				scope:recipient = { is_at_war = yes }
				scope:secondary_recipient = { has_character_flag = character_ransom_refused_by_player }
			}
			factor = 0
		}
	}
}
