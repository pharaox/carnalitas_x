# Enslaves scope:slave to scope:new_owner, also incurs opinion, dread, tyranny, piety, and stress
# effects if DRAMA is true.
carnx_enslave_effect = {
	if = {
		limit = { $DRAMA$ = yes }

		scope:slave = {
			# Victim hates slaver
			add_prestige_level = -1
			if = {
				limit = {
					scope:new_owner = {
						has_execute_reason = scope:slave
					}
				}
				add_opinion = {
					target = scope:new_owner
					modifier = carn_enslaved_me_opinion
				}
			}
			else = {
				add_opinion = {
					target = scope:new_owner
					modifier = carn_enslaved_me_crime_opinion
				}

				# Progress towards rival if unlawfully enslaved
				progress_towards_rival_effect = {
					CHARACTER = scope:new_owner
					REASON = carnx_rival_enslaved
					OPINION = 0
				}
			}

			# Victim's family & spouse hates slaver
			every_close_family_member = {
				limit = { NOT = { this = scope:new_owner } }
				add_to_temporary_list = victim_family_list
			}
			every_spouse = {
				limit = {
					NOR = {
						this = scope:new_owner
						is_in_list = victim_family_list
					}
				}
				add_to_temporary_list = victim_family_list
			}

			if = {
				limit = {
					any_in_list = {
						list = victim_family_list
						count > 0
					}
				}
				if = {
					limit = {
						scope:new_owner = {
							has_execute_reason = scope:slave
						}
					}
					every_in_list = {
						list = victim_family_list
						custom = all_close_family_and_spouses
						add_opinion = {
							target = scope:new_owner
							modifier = carn_enslaved_close_family_opinion
						}
					}
				}
				else = {
					every_in_list = {
						list = victim_family_list
						custom = all_close_family_and_spouses
						add_opinion = {
							target = scope:new_owner
							modifier = carn_enslaved_close_family_crime_opinion
						}
					}
				}
			}

			# Victim's dynasty hates new_owner
			if = {
				limit = {
					exists = dynasty
					exists = scope:new_owner.dynasty
					NOT = { dynasty = scope:new_owner.dynasty }
					NOT = {
						scope:new_owner = {
							has_execute_reason = scope:slave
						}
					}
				}
				dynasty = {
					every_dynasty_member = {
						limit = {
							NOR = {
								this = scope:slave
								is_in_list = victim_family_list
							}
						}
						custom = all_dynasty_members
						add_to_temporary_list = victim_dynasty_list
						add_opinion = {
							target = scope:new_owner
							modifier = carn_enslaved_dynasty_member_opinion
						}
					}
				}
			}

			# Victim's friends and lovers
			every_relation = {
				type = friend
				limit = {
					NOR = {
						this = scope:slave
						is_in_list = victim_family_list
						is_in_list = victim_dynasty_list
					}
				}
				add_to_list = victim_close_relations_list
			}
			every_relation = {
				type = lover
				limit = {
					NOR = {
						this = scope:slave
						is_in_list = victim_family_list
						is_in_list = victim_dynasty_list
						is_in_list = victim_close_relations_list
					}
				}
				add_to_list = victim_close_relations_list
			}
			if = {
				limit = {
					any_in_list = {
						list = victim_close_relations_list
						always = yes
					}
				}
				every_in_list = {
					list = victim_close_relations_list
					custom = all_friends_and_lovers
					add_opinion = {
						target = scope:new_owner
						modifier = carn_enslaved_close_relation_opinion
					}
				}
			}
		}

		scope:new_owner = {
			# Dread (similar to execution but reduced)
			if = {
				limit = {
					scope:slave = {
						time_in_prison = { years > 15 } # No one even remembers who they are anymore
					}
				}
				# No dread for you
			}
			else_if = { # Executing Emperors/HoF is quite dreadful
				limit = {
					scope:slave = {
						OR = {
							highest_held_title_tier >= tier_empire
							scope:new_owner.faith.religious_head = scope:slave # Your head of faith
						}
					}
				}
				add_dread = carnx_enslave_massive_dread_gain
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							highest_held_title_tier >= tier_kingdom
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_empire }
							is_powerful_vassal_of = scope:new_owner # Is your powerful vassal
							target_is_vassal_or_below = scope:new_owner # Your liege/s
							is_close_family_of = scope:new_owner
						}
					}
				}
				add_dread = carnx_enslave_major_dread_gain
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							highest_held_title_tier >= tier_duchy
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom }
							AND = { # Is your vassal, and higher than Baron
								is_vassal_of = scope:new_owner
								primary_title.tier > tier_barony
							}
							AND = { # Peer Vassals
								exists = primary_title
								primary_title.tier > tier_barony
								exists = liege
								liege = scope:new_owner.liege
							}
							has_trait = peasant_leader
						}
					}
				}
				add_dread = carnx_enslave_medium_dread_gain
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							highest_held_title_tier >= tier_county
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_duchy }
							is_vassal_of = scope:new_owner # Is your Baron vassal
							is_close_or_extended_family_of = scope:new_owner

							scope:new_owner = { # Executing close family of your vassals is dreadful...
								any_vassal = {
									is_close_family_of = scope:slave
								}
							}
							scope:new_owner = { # Executing close family of your liege/s is the same...
								any_liege_or_above = {
									is_close_family_of = scope:slave
								}
							}
						}
					}
				}
				add_dread = carnx_enslave_minor_dread_gain
			}

			# Remove piety
			if = {
				limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
				add_piety_level = -1
				add_piety = carnx_slavery_major_piety_loss
				carnx_slavery_doctrines_stress_impact_effect = yes
			}
			else_if = {
				limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
				add_piety = carnx_slavery_piety_loss
				carnx_slavery_doctrines_minor_stress_impact_effect = yes
			}

			# Add faith slaver trait
			if = {
				limit = {
					NOT = { carnx_is_slavery_accepted_trigger = { CHARACTER = scope:slave } }
				}
				carnx_acquire_faith_slaver_trait_effect = { CHARACTER = scope:slave }
			}

			hidden_effect = {
				# Potentially acquire slaver trait if scope:slave enslaved by scope:seller
				carnx_potentially_acquire_slaver_trait_effect = yes
			}

			# Other consequences
			carnx_apply_slavery_consequences_effect = {
				CHARACTER = scope:slave
				ACTION = flag:enslave
			}

			# Stress (similar to execution but toned down one level)
			if = { # Rival
				limit = { has_relation_rival = scope:slave }
				if = {
					limit = {
						NOR = {
							has_trait = sadistic
							has_trait = callous
							has_trait = vengeful
							has_trait = compassionate
							has_trait = forgiving
						}
					}
					add_stress = minor_stress_loss
				}
				else = {
					stress_impact = {
						sadistic = medium_stress_impact_loss
						callous = minor_stress_impact_loss
						vengeful = major_stress_impact_loss
						compassionate = miniscule_stress_impact_gain
						forgiving = miniscule_stress_impact_gain
					}
				}
			}
			else_if = { # Different faith and zealous
				limit = {
					has_trait = zealous
					NOT = { scope:new_owner.faith = scope:slave.faith }
				}
				if = {
					limit = {
						NOR = {
							has_trait = sadistic
							has_trait = callous
							has_trait = compassionate
							has_trait = forgiving
						}
					}
					add_stress = minor_stress_loss
				}
				else = {
					stress_impact = {
						sadistic = medium_stress_impact_loss
						callous = minor_stress_impact_loss
						compassionate = miniscule_stress_impact_gain
						forgiving = miniscule_stress_impact_gain
					}
				}
			}
			else_if = { # Execute reason and child / grandchild
				limit = {
					has_execute_reason = scope:slave
					NOT = {
						has_trait = sadistic
						has_trait = callous
					}
					scope:slave = {
						OR = {
							is_child_of = scope:new_owner
							is_grandchild_of = scope:new_owner
							is_great_grandchild_of = scope:new_owner
						}
					}
				}
				stress_impact = {
					base = miniscule_stress_impact_gain
					compassionate = major_stress_impact_gain
					forgiving = medium_stress_impact_gain
				}
			}
			else_if = { # No execute reason and child / grandchild
				limit = {
					NOT = {
						has_trait = sadistic
						has_trait = callous
					}
					scope:slave = {
						OR = {
							is_child_of = scope:new_owner
							is_grandchild_of = scope:new_owner
							is_great_grandchild_of = scope:new_owner
						}
					}
				}
				stress_impact = {
					base = minor_stress_impact_gain
					compassionate = major_stress_impact_gain
					forgiving = medium_stress_impact_gain
				}
			}
			else_if = { # Friend or lover
				limit = {
					NOT = {
						has_trait = sadistic
						has_trait = callous
					}
					scope:slave = {
						OR = {
							has_relation_friend = scope:new_owner
							has_relation_lover = scope:new_owner
						}
					}
				}
				stress_impact = {
					base = minor_stress_impact_gain
					compassionate = major_stress_impact_gain
					forgiving = medium_stress_impact_gain
				}
			}
			else_if = { # Execute reason
				limit = {
					has_execute_reason = scope:slave
				}
				stress_impact = {
					sadistic = minor_stress_impact_loss
					callous = miniscule_stress_impact_loss
					compassionate = minor_stress_impact_gain
					forgiving = miniscule_stress_impact_gain
				}
			}
			else = {
				stress_impact = {
					sadistic = minor_stress_impact_loss
					callous = miniscule_stress_impact_loss
					compassionate = medium_stress_impact_gain
					forgiving = minor_stress_impact_gain
				}
			}

			# Tyranny (similar to execution)
			if = { # Execute reason or at war
				limit = {
					OR = {
						has_execute_reason = scope:slave
						is_at_war_with = scope:slave
					}
				}
				custom_tooltip = carn_is_allowed_to_enslave_desc
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							is_landed = no
							NOT = { is_of_major_or_minor_interest_trigger = { CHARACTER = scope:new_owner } }
						}
					}
					scope:new_owner.faith = {
						faith_hostility_level = {
							target = scope:slave.faith
							value >= faith_hostile_level
						}
					}
				}
				custom_tooltip = carn_is_allowed_to_enslave_hostile_religion_desc
			}
			else_if = {
				limit = {
					scope:slave = { target_is_liege_or_above = prev }
				}
				add_tyranny = carnx_enslave_tyranny_gain
				add_legitimacy = miniscule_legitimacy_loss
			}
			else_if = {
				limit = {
					scope:slave = {
						NOT = { exists = liege }
						exists = host
					}
					any_pool_guest = { count > 0 }
				}
				every_pool_guest = {
					limit = {
						NOR = {
							this = scope:slave
							is_in_list = guest_list
						}
					}
					add_to_temporary_list = guest_list
				}
				every_in_list = {
					list = guest_list
					custom = all_your_guests
					add_opinion = {
						target = prev
						modifier = carn_enslaved_guest_opinion
					}
				}
			}
			else_if = {
				limit = {
					scope:slave = {
						exists = liege
						NOT = { liege = scope:slave }
					}
				}
				scope:slave.liege = {
					add_opinion = {
						target = prev
						modifier = carn_enslaved_my_countryman_opinion
					}
				}
			}

			# Consume execute reason
			if = {
				limit = {
					has_execute_reason = scope:slave
				}
				consume_execute_reasons = scope:slave
			}
		}
	}

	scope:slave = {
		if = {
			limit = { is_ruler = yes }
			every_character_war = {
				if = {
					limit = {
						primary_attacker = scope:slave
					}
					end_war = invalidated
				}
				else_if = {
					limit = {
						primary_defender = scope:slave
					}
					if = {
						limit = { primary_attacker = scope:new_owner }
						end_war = attacker
					}
					else = {
						end_war = invalidated
					}
				}
				else = {
					remove_participant = scope:slave
				}
			}
			depose = yes
		}
		hidden_effect = {
			remove_trait = former_slave
			add_trait = slave
			if = {
				limit = { is_married = yes }
				every_spouse = {
					divorce = scope:slave
				}
			}
			if = {
				limit = { exists = betrothed }
				break_betrothal = betrothed
			}
			if = {
				limit = {
					number_of_concubines > 0
				}
				every_concubine = {
					scope:slave = {
						remove_concubine = prev
					}
				}
			}
			if = {
				limit = { is_concubine = yes }
				this.concubinist = {
					remove_concubine = scope:slave
				}
			}
			every_relation = {
				type = guardian
				remove_relation_ward = prev
			}
			if = {
				# By default, randomly generated peasant leaders will disappear if captured in battle
				limit = {
					has_character_flag =  peasant_faction_random_peasant
				}
				add_character_flag = peasant_revolt_do_not_kill
			}
		}
	}

	scope:new_owner = {
		set_relation_slave = scope:slave
		if = {
			limit = {
				NOT = { has_character_flag = carnx_slave_0001_seller }
				scope:slave = { NOT = { is_courtier_of = scope:new_owner } }
			}
			hidden_effect = {
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}
		}
	}

	scope:slave = {
		# Release from prison
		if = {
			limit = { is_imprisoned_by = scope:new_owner }
			release_from_prison = yes
		}

		hidden_effect = {
			# Add / remove modifiers and flags
			if = {
				limit = { has_character_modifier = carnx_marked_for_enslavement_modifier }
				remove_character_modifier = carnx_marked_for_enslavement_modifier
			}

			# Trigger event
			if = {
				limit = {
					scope:new_owner = {
						NOT = { has_character_flag = carnx_slave_0001_seller }
					}
				}
				trigger_event = {
					on_action = carn_on_slave_enslaved
				}
			}
		}
	}
}

# Enslaves SLAVE to OWNER, also incurs opinion, dread, tyranny, piety, and stress
# effects if DRAMA is true. Sends interface messages. Overridden from Carnalitas.
carn_enslave_effect = {
	$SLAVE$ = { save_scope_as = slave }
	$OWNER$ = { save_scope_as = new_owner }

	scope:new_owner = {
		send_interface_message = {
			type = event_generic_neutral
			title = carn_msg_enslave
			right_icon = scope:slave

			carnx_enslave_effect = { DRAMA = $DRAMA$ }
		}
	}
}

# Frees the scoped character from slavery if they are a slave.
# Does not have any additional effects. Overriden from Carnalitas.
carn_free_slave_effect = {
	every_relation = {
		# Remove former owner
		type = slave_owner
		remove_relation_slave = prev
		hidden_effect = {
			carnx_add_mutual_former_slave_or_slave_owner_opinion_effect = { CHARACTER = prev }
		}
		save_scope_as = former_owner
	}

	# To prevent errors in carn_on_slave_freed, check if scope:former_owner exists
	# and if not, set it to the slave
	if = {
		limit = { NOT = { exists = scope:former_owner } }
		save_scope_as = former_owner
	}

	hidden_effect = {
		# Add / remove traits
		remove_trait = slave
		add_trait = former_slave

		# Add / remove modifiers and flags
		if = {
			limit = { has_character_modifier = carnx_marked_for_enslavement_modifier }
			remove_character_modifier = carnx_marked_for_enslavement_modifier
		}
		if = {
			limit = { has_character_flag = carnx_slave_recently_bought }
			remove_character_flag = carnx_slave_recently_bought
		}

		# Trigger event
		if = {
			limit = { exists = scope:payer }
			trigger_event = {
				on_action = carnx_on_slave_ransomed
			}
		}
		else_if = {
			limit = { exists = scope:liberator }
			trigger_event = {
				on_action = carnx_on_slave_liberated
			}
		}
		else_if = {
			limit = { exists = scope:stolen_gold_value }
			trigger_event = {
				on_action = carnx_on_slave_escaped
			}
		}
		else = {
			trigger_event = {
				on_action = carn_on_slave_freed
			}
		}
	}
}

# Frees all slaves owned by scope:recipient against slavery doctrines from slavery.
# Overriden from Carnalitas.
carn_free_illegal_slaves_effect = {
	scope:recipient = {
		every_relation = {
			type = slave
			if = {
				limit = {
					scope:recipient = {
						carnx_is_slavery_crime_trigger = { CHARACTER = prev }
					}
				}

				save_scope_as = slave
				if = {
					limit = {
						exists = scope:accepted_no_hook
					}
					scope:recipient = { save_scope_as = emancipator }
				}
				else = {
					scope:actor = { save_scope_as = emancipator }
				}

				scope:emancipator = {
					hidden_effect = {
						# Potentially acquire liberator trait if scope:slave not enslaved by scope:emancipator
						if = {
							limit = {
								scope:slave = {
									NOT = { carnx_was_enslaved_by_character_trigger = { CHARACTER = scope:emancipator } }
								}
							}
							carnx_potentially_acquire_liberator_trait_effect = yes
						}
					}
				}

				carnx_debug_log_effect = { MSG = carnx_debug_msg_freeing_illegal_slave }
				carn_free_slave_effect = yes
			}
		}
	}
}

# Frees scope:slave from slavery, also incurs opinion, dread, piety, and stress effects.
# Pays ransom cost to $EMANCIPATOR$ if scope:gold or scope:current_gold is yes.
carnx_free_slave_actual_effect = {
	scope:slave = {
		carn_free_slave_effect = yes

		# Release from prison if former owner different from emancipator
		if = {
			limit = {
				NOT = { scope:former_owner ?= $EMANCIPATOR$ }
				is_imprisoned_by = $EMANCIPATOR$
			}
			release_from_prison = yes
		}

		# Pay agreed ransom cost
		if = {
			limit = {
				OR = {
					scope:gold = yes
					scope:current_gold = yes
				}
			}
			pay_short_term_gold = {
				gold = scope:ransom_cost
				target = $EMANCIPATOR$
			}
		}

		# Convert to emancipator's faith
		if = {
			limit = {
				scope:demand_conversion = yes
			}

			# Set faith
			set_character_faith = $EMANCIPATOR$.faith

			# Add opinion to emancipator
			add_opinion = {
				modifier = demanded_my_conversion_opinion
				target = $EMANCIPATOR$
			}
		}

		# Renounce claims
		if = {
			limit = {
				scope:renounce_claims = yes
			}

			# Add opinion to emancipator
			add_opinion = {
				modifier = demanded_claim_renouncement
				target = $EMANCIPATOR$
			}

			# Remove claims
			every_claim = {
				explicit = yes
				limit = {
					save_temporary_scope_as = temp_claim
					OR = {
						holder = $EMANCIPATOR$
						AND = {
							exists = holder
							NOT = { prev = { target_is_liege_or_above = $EMANCIPATOR$ } }
							holder = { target_is_liege_or_above = $EMANCIPATOR$ }
						}
						$EMANCIPATOR$ = {
							any_held_title = {
								is_de_jure_liege_or_above_target = scope:temp_claim
							}
						}
					}
				}
				scope:slave = {
					remove_claim = prev
				}
			}
		}

		# No demands
		if = {
			limit = {
				scope:gold = no
				scope:current_gold = no
				scope:demand_conversion = no
				scope:renounce_claims = no
				scope:gain_hook = no
			}

			# Add opinion to emancipator
			add_opinion = {
				modifier = carn_freed_me_from_slavery_opinion
				target = $EMANCIPATOR$
			}
		}
	}

	$EMANCIPATOR$ = {
		# Add hook to emancipator
		if = {
			limit = {
				scope:gain_hook = yes
			}

			# Add opinion from slave
			reverse_add_opinion = {
				target = scope:slave
				modifier = demanded_hook
			}

			# Add hook to emancipator
			add_hook = { # Hook effect must match gain_hook option condition
				target = scope:slave
				type = favor_hook
			}
		}

		# No demands
		if = {
			limit = {
				scope:gold = no
				scope:current_gold = no
				scope:demand_conversion = no
				scope:renounce_claims = no
				scope:gain_hook = no
			}

			# Remove dread
			add_dread = carnx_free_slave_dread_loss

			# Add piety
			if = {
				limit = {
					NOT = {
						carnx_is_slavery_accepted_trigger = { CHARACTER = scope:slave }
					}
				}
				add_piety = carnx_slavery_piety_gain
				carnx_slavery_doctrines_reverse_stress_impact_effect = yes
			}

			# Add / remove stress
			stress_impact = {
				compassionate = medium_stress_impact_loss
				sadistic = medium_stress_impact_gain
				callous = minor_stress_impact_gain
			}

			hidden_effect = {
				# Potentially acquire liberator trait if scope:slave not enslaved by $EMANCIPATOR$
				if = {
					limit = {
						scope:slave = {
							NOT = { carnx_was_enslaved_by_character_trigger = { CHARACTER = $EMANCIPATOR$ } }
						}
					}
					carnx_potentially_acquire_liberator_trait_effect = yes
				}
			}
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:free
		}

		# Add opinion from former owner if different from emancipator
		if = {
			limit = {
				NOT = { scope:former_owner ?= $EMANCIPATOR$ }
			}
			reverse_add_opinion = {
				target = scope:former_owner
				modifier = carnx_liberated_my_slave_opinion
			}
		}

		if = {
			limit = {
				scope:slave = {
					NOR = {
						is_courtier_of = $EMANCIPATOR$
						has_character_flag = carnx_block_add_courtier
					}
				}
			}
			hidden_effect = {
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}
		}
	}
}

# Frees scope:slave from slavery, also incurs opinion, dread, piety, and stress effects.
# Pays ransom cost to scope:owner if scope:gold or scope:current_gold is yes.
# Sends interface messages. Overridden from Carnalitas.
carn_free_slave_interaction_effect = {
	if = {
		limit = { scope:gold = yes }
		save_scope_value_as = {
			name = ransom_cost
			value = scope:slave.carnx_slave_ransom_cost_value
		}
	}
	else_if = {
		limit = { scope:current_gold = yes }
		save_scope_value_as = {
			name = ransom_cost
			value = scope:slave.current_gold_value
		}
	}

	scope:owner = {
		send_interface_message = {
			type = event_generic_neutral
			title = carn_msg_slave_freed
			right_icon = scope:slave

			carnx_free_slave_actual_effect = { EMANCIPATOR = scope:owner }
		}
	}
}

# Ransoms scope:slave from slavery by scope:payer, also incurs opinion effects.
# Pays ransom cost to scope:owner if scope:gold or scope:current_gold is yes.
carnx_ransom_slave_actual_effect = {
	scope:slave = {
		carn_free_slave_effect = yes

		# Release from prison
		if = {
			limit = { is_imprisoned_by = scope:owner }
			release_from_prison = yes
		}

		# Add opinion of payer
		if = { # Only visible if a player is involved
			limit = {
				scope:payer = { is_ai = no }
			}
			add_opinion = {
				modifier = ransomed_from_prison
				opinion = 30
				target = scope:payer
				years = 10
			}
		}
		else = {
			hidden_effect = {
				add_opinion = {
					modifier = ransomed_from_prison
					opinion = 30
					target = scope:payer
					years = 10
				}
			}
		}
	}

	scope:payer = {
		# Pay agreed ransom cost
		if = {
			limit = {
				OR = {
					scope:gold = yes
					scope:current_gold = yes
				}
			}
			pay_short_term_gold = {
				gold = scope:ransom_cost
				target = scope:owner
			}
		}

		# Add piety
		if = {
			limit = {
				carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave }
			}
			add_piety = carnx_slavery_minor_piety_gain
			carnx_slavery_doctrines_reverse_minor_stress_impact_effect = yes
		}

		# Add / remove stress
		stress_impact = {
			compassionate = minor_stress_impact_loss
			sadistic = minor_stress_impact_gain
			callous = miniscule_stress_impact_gain
		}

		hidden_effect = {
			# Add slave to payer's court
			if = {
				limit = {
					scope:slave = {
						NOR = {
							is_courtier_of = scope:payer
							has_character_flag = carnx_block_add_courtier
						}
					}
				}
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}

			# Potentially acquire liberator trait if scope:slave not enslaved by scope:payer
			if = {
				limit = {
					scope:slave = {
						NOT = { carnx_was_enslaved_by_character_trigger = { CHARACTER = scope:payer } }
					}
				}
				carnx_potentially_acquire_liberator_trait_effect = yes
			}
		}
	}

	scope:owner = {
		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:demand_ransom
		}

		# Add hook to owner
		if = {
			limit = {
				scope:favor = yes
			}
			reverse_add_opinion = {
				modifier = demanded_hook
				target = scope:payer
			}
			add_hook = { # Hook effect must match gain_hook option condition
				target = scope:payer
				type = favor_hook
			}
		}
	}
}

# Ransoms scope:slave from slavery by scope:payer, also incurs opinion effects.
# Pays ransom cost to scope:owner if scope:gold or scope:current_gold is yes.
# Sends interface messages.
carnx_ransom_slave_interaction_effect = {
	scope:slave = {
		if = {
			limit = { has_variable = carnx_ransom_cost }
			save_scope_value_as = {
				name = ransom_cost
				value = var:carnx_ransom_cost
			}
		}
		else = {
			if = {
				limit = { scope:gold = yes }
				save_scope_value_as = {
					name = ransom_cost
					value = scope:slave.carnx_slave_ransom_cost_value
				}
			}
			else_if = {
				limit = { scope:current_gold = yes }
				save_scope_value_as = {
					name = ransom_cost
					value = scope:payer.current_gold_value
				}
			}
		}
	}

	scope:payer = {
		hidden_effect = {
			send_interface_message = {
				type = event_generic_neutral
				title = carnx_msg_slave_ransomed
				left_icon = scope:slave
				right_icon = scope:owner

				show_as_tooltip = {
					carnx_ransom_slave_actual_effect = yes
				}
			}
		}
	}

	scope:owner = {
		send_interface_message = {
			type = event_generic_neutral
			title = carnx_msg_slave_ransomed
			left_icon = scope:slave
			right_icon = scope:payer

			carnx_ransom_slave_actual_effect = yes
		}
	}
}

# Transfers the ownership of scope:slave from scope:seller to scope:buyer
# and pays scope:slave_price to scope:seller.
carnx_buy_slave_effect = {
	scope:slave = {
		hidden_effect = {
			# Remove former owner
			every_relation = {
				type = slave_owner
				remove_relation_slave = prev
				carnx_add_mutual_former_slave_or_slave_owner_opinion_effect = { CHARACTER = prev }
			}
		}

		# Release from prison
		if = {
			limit = { is_imprisoned_by = scope:seller }
			release_from_prison = yes
		}
	}

	scope:buyer = {
		# Pay price to seller
		if = {
			limit = {
				scope:buyer_short_term_gold >= scope:slave_price
			}
			pay_short_term_gold = {
				gold = scope:slave_price
				target = scope:seller
			}
		}
		else = {
			custom_tooltip = carnx_buyer_not_enough_gold_for_slave_price_tooltip
			hidden_effect = {
				pay_short_term_gold = {
					gold = scope:buyer_short_term_gold
					target = scope:seller
				}
			}
		}

		# Set buyer as new owner
		set_relation_slave = scope:slave

		# Remove piety
		if = {
			limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_major_piety_loss
			carnx_slavery_doctrines_stress_impact_effect = yes
		}
		else_if = {
			limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_piety_loss
			carnx_slavery_doctrines_minor_stress_impact_effect = yes
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:buy
		}

		hidden_effect = {
			# Add slave to new owner's court
			if = {
				limit = {
					scope:slave = { NOT = { is_courtier_of = scope:buyer } }
				}
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}
		}
	}

	scope:seller = {
		# Remove piety
		if = {
			limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_major_piety_loss
			carnx_slavery_doctrines_stress_impact_effect = yes
		}
		else_if = {
			limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_piety_loss
			carnx_slavery_doctrines_minor_stress_impact_effect = yes
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:sell
		}
	}

	scope:slave = {
		hidden_effect = {
			# Add / remove modifiers and flags
			if = {
				limit = { has_character_flag = carnx_slave_recently_bought }
				remove_character_flag = carnx_slave_recently_bought
			}
			add_character_flag = {
				flag = carnx_slave_recently_bought
				years = 2
			}

			# Trigger event
			trigger_event = {
				on_action = carnx_on_slave_bought
			}
		}
	}
}

# Transfers the ownership of scope:slave from scope:seller to scope:buyer
# and pays SLAVE_PRICE to scope:seller. Sends interface messages.
# Overridden from Carnalitas.
carn_buy_slave_effect = {
	scope:slave = {
		if = {
			limit = { has_variable = carnx_slave_price }
			save_scope_value_as = {
				name = slave_price
				value = var:carnx_slave_price
			}
		}
		else = {
			save_scope_value_as = {
				name = slave_price
				value = $SLAVE_PRICE$
			}
		}

		if = {
			limit = { has_variable = carnx_buyer_short_term_gold }
			save_scope_value_as = {
				name = buyer_short_term_gold
				value = var:carnx_buyer_short_term_gold
			}
		}
		else = {
			save_scope_value_as = {
				name = buyer_short_term_gold
				value = scope:buyer.short_term_gold
			}
		}
	}

	scope:buyer = {
		hidden_effect = {
			send_interface_message = {
				type = event_generic_neutral
				title = carnx_msg_slave_bought
				left_icon = scope:slave
				right_icon = scope:seller

				show_as_tooltip = {
					carnx_buy_slave_effect = yes
				}
			}
		}
	}

	scope:seller = {
		send_interface_message = {
			type = event_generic_neutral
			title = carnx_msg_slave_sold
			left_icon = scope:slave
			right_icon = scope:buyer

			carnx_buy_slave_effect = yes
		}
	}
}

# Seizes scope:slave by scope:new_owner, also incurs opinion effects.
carnx_seize_slave_effect = {
	scope:slave = {
		hidden_effect = {
			# Remove former owner
			every_relation = {
				type = slave_owner
				remove_relation_slave = prev
				carnx_add_mutual_former_slave_or_slave_owner_opinion_effect = { CHARACTER = prev }
				save_scope_as = former_owner
			}
		}

		# Release from prison
		if = {
			limit = { is_imprisoned_by = scope:new_owner }
			release_from_prison = yes
		}
	}

	scope:new_owner = {
		# Set new owner
		set_relation_slave = scope:slave

		# Add opinion from former owner
		reverse_add_opinion = {
			target = scope:former_owner
			modifier = carn_stole_my_slave_opinion
		}

		# Remove piety
		if = {
			limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_major_piety_loss
			carnx_slavery_doctrines_stress_impact_effect = yes
		}
		else_if = {
			limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_piety_loss
			carnx_slavery_doctrines_minor_stress_impact_effect = yes
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:seize
		}

		hidden_effect = {
			# Add slave to new owner's court
			if = {
				limit = {
					scope:slave = { NOT = { is_courtier_of = scope:new_owner } }
				}
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}
		}
	}

	scope:slave = {
		hidden_effect = {
			# Add / remove modifiers and flags
			if = {
				limit = { has_character_modifier = carnx_marked_for_enslavement_modifier }
				remove_character_modifier = carnx_marked_for_enslavement_modifier
			}
			if = {
				limit = { has_character_flag = carnx_slave_recently_bought }
				remove_character_flag = carnx_slave_recently_bought
			}

			# Trigger event
			trigger_event = {
				on_action = carnx_on_slave_seized
			}
		}
	}
}

# Seizes scope:slave by scope:new_owner, also incurs opinion effects.
# Sends interface messages.
carnx_seize_slave_interaction_effect = {
	scope:new_owner = {
		send_interface_message = {
			type = event_generic_neutral
			title = carnx_msg_slave_seized
			right_icon = scope:slave

			carnx_seize_slave_effect = yes
		}
	}

	scope:former_owner = {
		hidden_effect = {
			send_interface_message = {
				type = event_generic_neutral
				title = carnx_msg_slave_seized
				left_icon = scope:slave
				right_icon = scope:new_owner

				show_as_tooltip = {
					carnx_seize_slave_effect = yes
				}
			}
		}
	}
}

# Gifts scope:slave by scope:former_owner to scope:new_owner, also incurs opinion and stress effects.
carnx_gift_slave_effect = {
	scope:slave = {
		hidden_effect = {
			# Remove former owner
			every_relation = {
				type = slave_owner
				remove_relation_slave = prev
				carnx_add_mutual_former_slave_or_slave_owner_opinion_effect = { CHARACTER = prev }
			}
		}

		# Release from prison
		if = {
			limit = { is_imprisoned_by = scope:former_owner }
			release_from_prison = yes
		}
	}

	scope:former_owner = {
		# Add / remove stress
		stress_impact = {
			greedy = medium_stress_impact_gain
			generous = medium_stress_impact_loss
		}

		# Remove piety
		if = {
			limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_major_piety_loss
			carnx_slavery_doctrines_stress_impact_effect = yes
		}
		else_if = {
			limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_piety_loss
			carnx_slavery_doctrines_minor_stress_impact_effect = yes
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:offer_gift
		}
	}

	scope:new_owner = {
		# Set new owner
		set_relation_slave = scope:slave

		# Add opinion to former owner
		add_opinion = {
			target = scope:former_owner
			modifier = gift_opinion
			opinion = scope:gift_slave_opinion
		}

		# Remove piety
		if = {
			limit = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_major_piety_loss
			carnx_slavery_doctrines_stress_impact_effect = yes
		}
		else_if = {
			limit = { carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave } }
			add_piety = carnx_slavery_piety_loss
			carnx_slavery_doctrines_minor_stress_impact_effect = yes
		}

		# Other consequences
		carnx_apply_slavery_consequences_effect = {
			CHARACTER = scope:slave
			ACTION = flag:accept_gift
		}

		hidden_effect = {
			# Add slave to new owner's court
			if = {
				limit = {
					scope:slave = { NOT = { is_courtier_of = scope:new_owner } }
				}
				carnx_add_courtier_effect = { SLAVE = scope:slave }
			}
		}
	}

	scope:slave = {
		hidden_effect = {
			# Add / remove modifiers and flags
			if = {
				limit = { has_character_flag = carnx_slave_recently_bought }
				remove_character_flag = carnx_slave_recently_bought
			}

			# Trigger event
			trigger_event = {
				on_action = carnx_on_slave_gifted
			}
		}
	}
}

# Gifts scope:slave by scope:former_owner to scope:new_owner, also incurs opinion and stress effects.
# Sends interface messages.
carnx_gift_slave_interaction_effect = {
	save_scope_value_as = {
		name = gift_slave_opinion
		value = $OPINION$
	}

	scope:new_owner = {
		hidden_effect = {
			send_interface_message = {
				type = event_generic_neutral
				title = carnx_msg_slave_gifted
				left_icon = scope:slave
				right_icon = scope:former_owner

				show_as_tooltip = {
					carnx_gift_slave_effect = yes
				}
			}
		}
	}

	scope:former_owner = {
		send_interface_message = {
			type = event_generic_neutral
			title = carnx_msg_slave_gifted
			left_icon = scope:slave
			right_icon = scope:new_owner

			carnx_gift_slave_effect = yes
		}
	}
}

# Liberates scope:slave from slavery, also incurs opinion, dread, piety, and stress effects.
# Pays ransom cost to scope:liberator if scope:gold or scope:current_gold is yes.
# Sends interface messages.
carnx_liberate_slave_interaction_effect = {
	if = {
		limit = { scope:gold = yes }
		save_scope_value_as = {
			name = ransom_cost
			value = scope:slave.carnx_slave_ransom_cost_value
		}
	}
	else_if = {
		limit = { scope:current_gold = yes }
		save_scope_value_as = {
			name = ransom_cost
			value = scope:slave.current_gold_value
		}
	}

	scope:liberator = {
		send_interface_message = {
			type = event_generic_neutral
			title = carnx_msg_slave_liberated
			right_icon = scope:slave

			carnx_free_slave_actual_effect = { EMANCIPATOR = scope:liberator }
		}
	}

	scope:former_owner = {
		hidden_effect = {
			send_interface_message = {
				type = event_generic_neutral
				title = carnx_msg_slave_liberated
				left_icon = scope:slave
				right_icon = scope:liberator

				show_as_tooltip = {
					carnx_free_slave_actual_effect = { EMANCIPATOR = scope:liberator }
				}
			}
		}
	}
}

carnx_get_valid_buyers_or_sellers_effect = {
	save_temporary_scope_as = party
	every_ruler = {
		limit = {
			carnx_valid_buyer_or_seller_trigger = { PARTY = scope:party }
		}
		add_to_list = $LIST$
	}
}

carnx_get_valid_payers_or_owners_effect = {
	save_temporary_scope_as = party
	every_ruler = {
		limit = {
			carnx_valid_payer_or_owner_trigger = { PARTY = scope:party }
		}
		add_to_list = $LIST$
	}
}

carnx_add_buy_slave_variables_effect = {
	set_variable = {
		name = carnx_slave_price
		value = $SLAVE_PRICE$
	}
	set_variable = {
		name = carnx_buyer_short_term_gold
		value = scope:buyer.short_term_gold
	}
	set_variable = {
		name = carnx_buyer
		value = scope:buyer
	}
}

carnx_remove_buy_slave_variables_effect = {
	if = {
		limit = { has_variable = carnx_slave_price }
		remove_variable = carnx_slave_price
	}
	if = {
		limit = { has_variable = carnx_buyer_short_term_gold }
		remove_variable = carnx_buyer_short_term_gold
	}
	if = {
		limit = { has_variable = carnx_buyer }
		remove_variable = carnx_buyer
	}
}

carnx_add_ransom_slave_variables_effect = {
	if = {
		limit = { scope:gold = yes }
		set_variable = {
			name = carnx_ransom_cost
			value = scope:slave.carnx_slave_ransom_cost_value
		}
	}
	else_if = {
		limit = { scope:current_gold = yes }
		set_variable = {
			name = carnx_ransom_cost
			value = scope:payer.current_gold_value
		}
	}
	set_variable = {
		name = carnx_payer
		value = scope:payer
	}
}

carnx_remove_ransom_slave_variables_effect = {
	if = {
		limit = { has_variable = carnx_ransom_cost }
		remove_variable = carnx_ransom_cost
	}
	if = {
		limit = { has_variable = carnx_payer }
		remove_variable = carnx_payer
	}
}

carnx_add_gift_slave_variables_effect = {
	set_variable = {
		name = carnx_new_owner
		value = scope:new_owner
	}
}

carnx_remove_gift_slave_variables_effect = {
	if = {
		limit = { has_variable = carnx_new_owner }
		remove_variable = carnx_new_owner
	}
}

# Add carn_former_slave_or_slave_owner_opinion from CHARACTER to the scoped character.
carnx_add_former_slave_or_slave_owner_opinion_effect = {
	reverse_add_opinion = {
		target = $CHARACTER$
		modifier = carn_former_slave_or_slave_owner_opinion
	}
}

# Add carn_former_slave_or_slave_owner_opinion mutually for CHARACTER and the scoped character.
carnx_add_mutual_former_slave_or_slave_owner_opinion_effect = {
	add_opinion = {
		target = $CHARACTER$
		modifier = carn_former_slave_or_slave_owner_opinion
	}
	reverse_add_opinion = {
		target = $CHARACTER$
		modifier = carn_former_slave_or_slave_owner_opinion
	}
}

carnx_potentially_acquire_slaver_trait_effect = {
	# Increment slaver counter
	if = {
		limit = {
			NOT = { has_variable = carnx_slaver_counter }
		}
		set_variable = {
			name = carnx_slaver_counter
			value = 1
		}
	}
	else = {
		change_variable = {
			name = carnx_slaver_counter
			add = 1
		}
	}

	# Potentially acquire slaver trait if slaver counter >= 10
	if = {
		limit = {
			has_variable = carnx_slaver_counter
			var:carnx_slaver_counter >= 10
			NOT = {
				has_trait = carnx_slaver
				has_trait = carnx_liberator
			}
		}
		random = {
			chance = 5
			modifier = {
				var:carnx_slaver_counter >= 20
				add = 5
			}
			modifier = {
				var:carnx_slaver_counter >= 30
				add = 5
			}
			modifier = {
				var:carnx_slaver_counter >= 40
				add = 5
			}
			modifier = {
				var:carnx_slaver_counter >= 50
				add = 5
			}

			trigger_event = {
				id = carnx_slave.0006
			}
		}
	}

	# Potentially acquire "the Slaver" nickname
	if = {
		limit = {
			has_trait = carnx_slaver
		}
		random = {
			chance = 10
			set_nickname_effect = { NICKNAME = carnx_nick_the_slaver }
		}
	}
}

carnx_potentially_acquire_liberator_trait_effect = {
	# Increment liberator counter
	if = {
		limit = {
			NOT = { has_variable = carnx_liberator_counter }
		}
		set_variable = {
			name = carnx_liberator_counter
			value = 1
		}
	}
	else = {
		change_variable = {
			name = carnx_liberator_counter
			add = 1
		}
	}

	# Potentially acquire liberator trait if liberator counter >= 10
	if = {
		limit = {
			has_variable = carnx_liberator_counter
			var:carnx_liberator_counter >= 10
			NOT = {
				has_trait = carnx_slaver
				has_trait = carnx_liberator
			}
		}
		random = {
			chance = 5
			modifier = {
				var:carnx_liberator_counter >= 20
				add = 5
			}
			modifier = {
				var:carnx_liberator_counter >= 30
				add = 5
			}
			modifier = {
				var:carnx_liberator_counter >= 40
				add = 5
			}
			modifier = {
				var:carnx_liberator_counter >= 50
				add = 5
			}

			trigger_event = {
				id = carnx_slave.0007
			}
		}
	}

	# Potentially acquire "Breaker of Chains" nickname
	if = {
		limit = {
			has_trait = carnx_liberator
		}
		random = {
			chance = 10
			set_nickname_effect = { NICKNAME = carnx_nick_the_liberator }
		}
	}
}

carnx_acquire_faith_slaver_trait_effect = {
	$CHARACTER$ = { save_temporary_scope_as = other }
	if = {
		limit = {
			faith = {
				faith_hostility_level = {
					target = scope:other.faith
					value >= faith_hostile_level
				}
			}
		}
		add_trait = carnx_faith_slaver_1
		carnx_debug_log_effect = { MSG = carnx_debug_msg_character_acquired_faith_slaver_1_trait }
	}
	else = {
		add_trait = carnx_faith_slaver_2
		carnx_debug_log_effect = { MSG = carnx_debug_msg_character_acquired_faith_slaver_2_trait }
	}
}

# Override in compatibility mods to prevent conversion mods (e.g. AGOT) from redirecting courtiers.
carnx_add_courtier_effect = {
	add_courtier = $SLAVE$
}

# Override in compatibility mods to apply additional slavery consequences
carnx_apply_slavery_consequences_effect = {
	if = {
		limit = {
			exists = $CHARACTER$
			$ACTION$ = flag:none
		}
	}
}

carnx_slavery_doctrines_stress_impact_effect = {
	stress_impact = {
		zealous = medium_stress_impact_gain # 40
		cynical = minor_stress_impact_loss # -15
	}
}

carnx_slavery_doctrines_minor_stress_impact_effect = {
	stress_impact = {
		zealous = minor_stress_impact_gain # 20
		cynical = miniscule_stress_impact_loss # -5
	}
}

carnx_slavery_doctrines_reverse_stress_impact_effect = {
	stress_impact = {
		zealous = medium_stress_impact_loss # -30
		cynical = minor_stress_impact_gain # 20
	}
}

carnx_slavery_doctrines_reverse_minor_stress_impact_effect = {
	stress_impact = {
		zealous = minor_stress_impact_loss # -15
		cynical = miniscule_stress_impact_gain # 10
	}
}
