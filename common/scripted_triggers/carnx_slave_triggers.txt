carnx_can_interact_with_trigger = {
	NOT = { this = $PARTY$ }
	highest_held_title_tier >= tier_county
	is_busy_in_events_localised = yes
	in_diplomatic_range = $PARTY$
	NOT = { is_at_war_with = $PARTY$ }
	is_imprisoned = no
}

carnx_can_sell_slave_to_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
	short_term_gold > 1
}

carnx_can_buy_slave_from_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
}

carnx_can_gift_slave_to_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
}

carnx_can_demand_ransom_slave_from_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
}

carnx_can_offer_ransom_slave_to_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
}

carnx_can_demand_free_illegal_slaves_trigger = {
	carnx_can_interact_with_trigger = { PARTY = $PARTY$ }
	NOT = { has_strong_hook = $PARTY$ }
}

carnx_can_start_interaction_trigger = {
	trigger_if = {
		limit = {
			NOT = { has_character_flag = carnx_slave_0001_seller }
		}
		highest_held_title_tier >= tier_county
	}
	is_busy_in_events_localised = yes
	is_imprisoned = no
}

carnx_can_be_slave_owner_trigger = {
	always = yes
}

carnx_slave_can_be_sold_trigger = {
	carn_slave_can_be_sold_trigger = yes
	is_travelling = no
	is_in_army = no
	custom_description = {
		text = ALREADY_IN_ACTIVITY
		NOT = { exists = involved_activity }
	}
	NOT = { has_variable = gone_adventuring }
}

carnx_slave_can_be_freed_trigger = {
	NOR = {
		has_character_flag = carn_slave_cannot_be_freed
		has_trait_with_flag = carn_slave_cannot_be_freed
	}
	trigger_if = {
		limit = { exists = imprisoner }
		has_relation_slave_owner = imprisoner
	}
}

carnx_character_can_ransom_slave_trigger = {
	OR = {
		AND = {
			$CHARACTER$ = {
				has_character_modifier = carnx_slavery_attitude_liberator_modifier
			}
			faith = $CHARACTER$.faith
		}
		carnx_is_family_or_positive_relation_trigger = { CHARACTER = $CHARACTER$ }
	}
}

carnx_slave_can_be_bought_by_trigger = {
	NOR = {
		has_variable = carnx_payer
		has_variable = carnx_new_owner
	}
	trigger_if = {
		limit = { has_variable = carnx_buyer }
		var:carnx_buyer = $CHARACTER$
	}
}

carnx_slave_can_be_ransomed_by_trigger = {
	NOR = {
		has_variable = carnx_buyer
		has_variable = carnx_new_owner
	}
	trigger_if = {
		limit = { has_variable = carnx_payer }
		var:carnx_payer = $CHARACTER$
	}
}

carnx_slave_can_be_received_by_trigger = {
	NOR = {
		has_variable = carnx_buyer
		has_variable = carnx_payer
	}
	trigger_if = {
		limit = { has_variable = carnx_new_owner }
		var:carnx_new_owner = $CHARACTER$
	}
}

carnx_slave_has_pending_transaction = {
	OR = {
		has_variable = carnx_buyer
		has_variable = carnx_payer
		has_variable = carnx_new_owner
	}
}

carnx_valid_buyer_or_seller_trigger = {
	NOT = { this = $PARTY$ }
	in_diplomatic_range = $PARTY$
	is_ruler = yes
	trigger_if = {
		limit = {
			has_game_rule = carnx_valid_trading_partners_same_and_neighboring_realms
		}
		OR = {
			carnx_is_same_realm_character_trigger = { PARTY = $PARTY$ }
			carnx_is_neighboring_realm_character_trigger = { PARTY = $PARTY$ }
		}
	}
	trigger_else_if = {
		limit = {
			has_game_rule = carnx_valid_trading_partners_within_trading_range
		}
		OR = {
			carnx_is_same_realm_character_trigger = { PARTY = $PARTY$ }
			carnx_is_neighboring_realm_character_trigger = { PARTY = $PARTY$ }
			carnx_is_landed_ruler_within_trading_range_trigger = { PARTY = $PARTY$ }
		}
	}
	trigger_else = {
		always = yes
	}
}

carnx_valid_payer_or_owner_trigger = {
	NOT = { this = $PARTY$ }
	in_diplomatic_range = $PARTY$
	is_ruler = yes
}

carnx_is_same_realm_character_trigger = {
	trigger_if = {
		limit = { exists = top_liege }
		trigger_if = {
			limit = { $PARTY$ = { exists = top_liege } }
			$PARTY$.top_liege = top_liege
		}
		trigger_else = {
			top_liege = $PARTY$
		}
	}
	trigger_else = {
		$PARTY$ = { exists = top_liege }
		$PARTY$.top_liege = this
	}
}

carnx_is_neighboring_realm_character_trigger = {
	any_neighboring_and_across_water_top_liege_realm_owner = {
		trigger_if = {
			limit = { $PARTY$ = { exists = top_liege } }
			$PARTY$.top_liege = this
		}
		trigger_else = {
			this = $PARTY$
		}
	}
}

carnx_is_landed_ruler_within_trading_range_trigger = {
	is_landed = yes
	$PARTY$ = { is_landed = yes }
	capital_province = {
		squared_distance = {
			target = $PARTY$.capital_province
			value <= $PARTY$.carnx_slave_trading_range_value
		}
	}
}

carnx_has_important_role_trigger = {
	any_relation = {
		type = ward
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = guardian
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = mentor
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = student
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
}

# Does the scoped character have a valid reason to execute $CHARACTER$.
# In addition to having an explicit execute reason, this also includes
# $CHARACTER$ being a rival / nemesis, a cheating spouse, or a ruler you can inherit land from.
carnx_has_execute_reason_trigger = {
	OR = {
		has_execute_reason = $CHARACTER$
		has_relation_rival = $CHARACTER$ # Execute rivals
		has_relation_nemesis = $CHARACTER$ # Execute rivals
		$CHARACTER$ = {
			is_spouse_of = prev
			exposed_cheating_on_spouse_trigger = { SPOUSE = prev }
		}
		any_heir_title = { # Execute rulers you can inherit land from
			exists = holder
			holder = $CHARACTER$
			place_in_line_of_succession = {
				target = prev
				value > 2
			}
		}
	}
}

carnx_has_execute_reason_slave_trigger = {
	OR = {
		has_execute_reason = $CHARACTER$
		has_relation_rival = $CHARACTER$
		has_relation_nemesis = $CHARACTER$
		$CHARACTER$ = {
			exposed_cheating_on_spouse_trigger = { SPOUSE = $RULER$ }
		}
	}
}

# Is the scoped character a family or a positive relation of $CHARACTER$.
carnx_is_family_or_positive_relation_trigger = {
	OR = {
		has_relation_best_friend = $CHARACTER$
		has_relation_soulmate = $CHARACTER$
		has_relation_friend = $CHARACTER$
		has_relation_lover = $CHARACTER$
		has_secret_relation_lover = $CHARACTER$
		has_relation_crush = $CHARACTER$
		is_spouse_of = $CHARACTER$
		is_close_or_extended_family_of = $CHARACTER$
		AND = {
			NOT = { is_lowborn = yes }
			dynasty = $CHARACTER$.dynasty
		}
	}
	NOR = {
		has_relation_rival = $CHARACTER$
		has_relation_nemesis = $CHARACTER$
	}
}

carnx_gift_slave_recipient_trigger = {
	OR = {
		# Generous characters will give gifts to their friends/lovers
		AND = {
			OR = {
				has_secret_relation_lover = scope:actor
				has_relation_lover = scope:actor
				has_relation_soulmate = scope:actor
				has_relation_friend = scope:actor
				has_relation_best_friend = scope:actor
			}
			scope:actor = {
				OR = {
					ai_greed <= high_negative_ai_value
					AND = {
						ai_greed < 0
						culture = {
							has_cultural_parameter = gives_more_gifts
						}
					}
				}
			}
		}

		# Characters with the Generous Cultural Tradition will give gifts to more people
		AND = {
			is_ruler = yes
			OR = {
				is_allied_to = scope:actor
				is_close_or_extended_family_of = scope:actor
			}
			scope:actor = {
				ai_greed < 0
				culture = {
					has_cultural_parameter = gives_more_gifts
				}
			}
		}

		# Characters with the loyal trait more likely to give gifts to friends
		AND = {
			OR = {
				has_relation_friend = scope:actor
				has_relation_best_friend = scope:actor
				is_allied_to = scope:actor
				is_close_or_extended_family_of = scope:actor
			}
			scope:actor = {
				ai_greed <= 0
				has_trait = loyal
			}
		}

		# Powerful vassals should be considered
		AND = {
			is_powerful_vassal_of = scope:actor
			opinion = {
				target = scope:actor
				value < 0
			}
			NOT ={
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Factioneering vassals should be considered
		AND = {
			is_vassal_of = scope:actor
			is_a_faction_member = yes
			NOT ={
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Realm Priests should be considered
		AND = {
			scope:actor = {
				faith = { has_doctrine = doctrine_theocracy_temporal }
				exists = cp:councillor_court_chaplain
				cp:councillor_court_chaplain = scope:recipient
			}
			opinion = {
				target = scope:actor
				value <= 25
			}
			NOT = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Independent ruler within the struggle should be considered
		AND = {
			any_character_struggle = {
				phase_has_catalyst = catalyst_gift_independent_ruler
			}
		}
	}
}

# Is owning slaves of $CHARACTER$'s faith accepted according to the scoped character's faith.
carnx_is_slavery_accepted_trigger = {
	$CHARACTER$ = { save_temporary_scope_as = other }
	OR = {
		faith = {
			has_doctrine = carn_doctrine_same_slavery_accepted
			faith_hostility_level = {
				target = scope:other.faith
				value < faith_hostile_level
			}
		}
		faith = {
			has_doctrine = carn_doctrine_other_slavery_accepted
			faith_hostility_level = {
				target = scope:other.faith
				value >= faith_hostile_level
			}
		}
	}
}

# Is owning slaves of $CHARACTER$'s faith shunned according to the scoped character's faith.
carnx_is_slavery_shunned_trigger = {
	$CHARACTER$ = { save_temporary_scope_as = other }
	OR = {
		faith = {
			has_doctrine = carn_doctrine_same_slavery_shunned
			faith_hostility_level = {
				target = scope:other.faith
				value < faith_hostile_level
			}
		}
		faith = {
			has_doctrine = carn_doctrine_other_slavery_shunned
			faith_hostility_level = {
				target = scope:other.faith
				value >= faith_hostile_level
			}
		}
	}
}

# Is owning slaves of $CHARACTER$'s faith a crime according to the scoped character's faith.
carnx_is_slavery_crime_trigger = {
	$CHARACTER$ = { save_temporary_scope_as = other }
	OR = {
		faith = {
			has_doctrine = carn_doctrine_same_slavery_crime
			faith_hostility_level = {
				target = scope:other.faith
				value < faith_hostile_level
			}
		}
		faith = {
			has_doctrine = carn_doctrine_other_slavery_crime
			faith_hostility_level = {
				target = scope:other.faith
				value >= faith_hostile_level
			}
		}
	}
}

carnx_is_slavery_always_accepted_trigger = {
	faith = {
		AND = {
			has_doctrine = carn_doctrine_same_slavery_accepted
			has_doctrine = carn_doctrine_other_slavery_accepted
		}
	}
}

carnx_is_slavery_never_accepted_trigger = {
	faith = {
		NOR = {
			has_doctrine = carn_doctrine_same_slavery_accepted
			has_doctrine = carn_doctrine_other_slavery_accepted
		}
	}
}

carnx_is_slavery_always_crime_trigger = {
	faith = {
		AND = {
			has_doctrine = carn_doctrine_same_slavery_crime
			has_doctrine = carn_doctrine_other_slavery_crime
		}
	}
}

carnx_is_slavery_never_crime_trigger = {
	faith = {
		NOR = {
			has_doctrine = carn_doctrine_same_slavery_crime
			has_doctrine = carn_doctrine_other_slavery_crime
		}
	}
}

carnx_is_slavery_always_forbidden_trigger = {
	$ACTION$ = flag:none
	always = no
}

carnx_can_serve_as_chancellor_trigger = {
	carnx_can_serve_as_councillor_trigger = {
		TYPE = councillor_chancellor
		NAME = chancellor
		LIEGE = $RULER$
		SKILL = diplomacy
	}
}

carnx_can_serve_as_marshal_trigger = {
	carnx_can_serve_as_councillor_trigger = {
		TYPE = councillor_marshal
		NAME = marshal
		LIEGE = $RULER$
		SKILL = martial
	}
}

carnx_can_serve_as_steward_trigger = {
	carnx_can_serve_as_councillor_trigger = {
		TYPE = councillor_steward
		NAME = steward
		LIEGE = $RULER$
		SKILL = stewardship
	}
}

carnx_can_serve_as_spymaster_trigger = {
	carnx_can_serve_as_councillor_trigger = {
		TYPE = councillor_spymaster
		NAME = spymaster
		LIEGE = $RULER$
		SKILL = intrigue
	}
}

carnx_can_serve_as_councillor_trigger = {
	save_temporary_scope_as = candidate
	carnx_can_be_$NAME$_trigger = { COURT_OWNER = $LIEGE$ }
	$SKILL$ > carnx_default_skill_threshold
	$LIEGE$ = {
		exists = council_task:$TYPE$
		carnx_can_appoint_$NAME$_trigger = yes
		trigger_if = {
			limit = { exists = cp:$TYPE$ }
			cp:$TYPE$ = {
				OR = {
					$SKILL$ <= carnx_default_skill_threshold
					this = scope:candidate
				}
			}
		}
		NOR = {
			any_courtier = {
				carnx_can_be_$NAME$_trigger = { COURT_OWNER = $LIEGE$ }
				NOT = { has_council_position = $TYPE$ }
				$SKILL$ > carnx_default_skill_threshold
				NOT = { this = scope:candidate }
			}
			any_vassal = {
				carnx_can_be_$NAME$_trigger = { COURT_OWNER = $LIEGE$ }
				NOT = { has_council_position = $TYPE$ }
				$SKILL$ > carnx_default_skill_threshold
				NOT = { this = scope:candidate }
			}
		}
	}
}

carnx_can_serve_as_knight_trigger = {
	save_temporary_scope_as = candidate
	can_be_knight_trigger = { ARMY_OWNER = $RULER$ }
	prowess > carnx_default_skill_threshold
	$RULER$ = {
		highest_held_title_tier >= tier_county
		OR = {
			number_of_knights < max_number_of_knights
			any_knight = {
				OR = {
					prowess <= carnx_default_skill_threshold
					this = scope:candidate
				}
			}
		}
		NOR = {
			any_courtier = {
				can_be_knight_trigger = { ARMY_OWNER = $RULER$ }
				NOT = { is_knight_of = $RULER$ }
				prowess > carnx_default_skill_threshold
				NOT = { this = scope:candidate }
			}
			any_vassal = {
				can_be_knight_trigger = { ARMY_OWNER = $RULER$ }
				NOT = { is_knight_of = $RULER$ }
				prowess > carnx_default_skill_threshold
				NOT = { this = scope:candidate }
			}
		}
	}
}

carnx_can_serve_as_commander_trigger = {
	save_temporary_scope_as = candidate
	can_be_commander_basic_trigger = { ARMY_OWNER = $RULER$ }
	carnx_commander_skill_value > carnx_commander_skill_value_threshold
	$RULER$ = {
		highest_held_title_tier >= tier_county
		any_courtier = {
			count = all
			add_to_temporary_list = commanders
		}
		any_vassal = {
			count = all
			add_to_temporary_list = commanders
		}
		any_in_list = {
			list = commanders
			can_be_commander_basic_trigger = { ARMY_OWNER = $RULER$ }
			carnx_commander_skill_value > carnx_commander_skill_value_threshold
			NOT = { this = scope:candidate }
			count < 3
		}
	}
}

carnx_can_serve_as_court_physician_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_physician_court_position
		NAME = court_physician
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_antiquarian_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = antiquarian_court_position
		NAME = antiquarian
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_court_gardener_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_gardener_court_position
		NAME = court_gardener
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_wet_nurse_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = wet_nurse_court_position
		NAME = wet_nurse
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_court_tutor_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_tutor_court_position
		NAME = court_tutor
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_food_taster_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = food_taster_court_position
		NAME = food_taster
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_seneschal_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = seneschal_court_position
		NAME = seneschal
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_cupbearer_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = cupbearer_court_position
		NAME = cupbearer
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_chief_eunuch_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = chief_eunuch_court_position
		NAME = chief_eunuch
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_court_jester_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_jester_court_position
		NAME = court_jester
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_court_poet_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_poet_court_position
		NAME = court_poet
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_court_musician_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = court_musician_court_position
		NAME = court_musician
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_bodyguard_trigger = {
	carnx_can_serve_as_multi_court_position_trigger = {
		TYPE = bodyguard_court_position
		NAME = bodyguard
		LIEGE = $RULER$
		DESIRED_COUNT = $RULER$.carnx_number_of_desired_bodyguards
	}
}

carnx_can_serve_as_champion_trigger = {
	carnx_can_serve_as_multi_court_position_trigger = {
		TYPE = champion_court_position
		NAME = champion
		LIEGE = $RULER$
		DESIRED_COUNT = $RULER$.carnx_number_of_desired_champions
	}
}

carnx_can_serve_as_executioner_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = executioner_court_position
		NAME = executioner
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_master_assassin_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = master_assassin_court_position
		NAME = master_assassin
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_chronicler_trigger = {
	carnx_can_serve_as_court_position_trigger = {
		TYPE = chronicler_court_position
		NAME = chronicler
		LIEGE = $RULER$
	}
}

carnx_can_serve_as_slave_concubine_trigger = {
	carnx_can_serve_as_multi_court_position_trigger = {
		TYPE = carnx_slave_concubine_court_position
		NAME = slave_concubine
		LIEGE = $RULER$
		DESIRED_COUNT = $RULER$.carnx_number_of_desired_slave_concubines
	}
}

carnx_can_serve_as_slave_captain_trigger = {
	carnx_can_serve_as_multi_court_position_trigger = {
		TYPE = carnx_slave_captain_court_position
		NAME = slave_captain
		LIEGE = $RULER$
		DESIRED_COUNT = $RULER$.carnx_number_of_desired_slave_captains
	}
}

carnx_can_serve_as_slave_eunuch_trigger = {
	carnx_can_serve_as_multi_court_position_trigger = {
		TYPE = carnx_slave_eunuch_court_position
		NAME = slave_eunuch
		LIEGE = $RULER$
		DESIRED_COUNT = $RULER$.carnx_number_of_desired_slave_eunuchs
	}
}

carnx_can_serve_as_court_position_trigger = {
	save_temporary_scope_as = candidate
	carnx_can_be_$NAME$_trigger = { LIEGE = $LIEGE$ }
	aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
	$LIEGE$ = {
		OR = {
			can_employ_court_position_type = $TYPE$
			AND = {
				employs_court_position = $TYPE$
				any_court_position_holder = {
					type = $TYPE$
					OR = {
						aptitude:$TYPE$ <= carnx_$NAME$_aptitude_threshold
						this = scope:candidate
					}
				}
			}
		}
		NOR = {
			any_courtier = {
				can_be_employed_as = $TYPE$
				NOT = { has_court_position = $TYPE$ }
				aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
				NOT = { this = scope:candidate }
			}
			any_vassal = {
				can_be_employed_as = $TYPE$
				NOT = { has_court_position = $TYPE$ }
				aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
				NOT = { this = scope:candidate }
			}
		}
	}
}

carnx_can_serve_as_multi_court_position_trigger = {
	save_temporary_scope_as = candidate
	carnx_can_be_$NAME$_trigger = { LIEGE = $LIEGE$ }
	aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
	$LIEGE$ = {
		OR = {
			AND = {
				can_employ_court_position_type = $TYPE$
				any_court_position_holder = {
					type = $TYPE$
					count < $DESIRED_COUNT$
				}
			}
			AND = {
				employs_court_position = $TYPE$
				any_court_position_holder = {
					type = $TYPE$
					OR = {
						aptitude:$TYPE$ <= carnx_$NAME$_aptitude_threshold
						this = scope:candidate
					}
				}
			}
		}
		NOR = {
			any_courtier = {
				can_be_employed_as = $TYPE$
				NOT = { has_court_position = $TYPE$ }
				aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
				NOT = { this = scope:candidate }
			}
			any_vassal = {
				can_be_employed_as = $TYPE$
				NOT = { has_court_position = $TYPE$ }
				aptitude:$TYPE$ > carnx_$NAME$_aptitude_threshold
				NOT = { this = scope:candidate }
			}
		}
	}
}

carnx_has_max_councillor_skill_difference_trigger = {
	$SLAVE$ = {
		trigger_if = {
			limit = {
				NOT = { exists = scope:max_councillor_skill_difference }
			}
			$RULER$ = {
				save_temporary_scope_as = liege
			}
			save_temporary_scope_value_as = {
				name = max_councillor_skill_difference
				value = carnx_max_councillor_skill_difference_value
			}
		}
		scope:max_councillor_skill_difference > 0
		carnx_$NAME$_skill_difference_value = scope:max_councillor_skill_difference
	}
}

carnx_has_max_aptitude_difference_trigger = {
	$SLAVE$ = {
		trigger_if = {
			limit = {
				NOT = { exists = scope:max_aptitude_difference }
			}
			$RULER$ = {
				save_temporary_scope_as = liege
			}
			save_temporary_scope_value_as = {
				name = max_aptitude_difference
				value = carnx_max_aptitude_difference_value
			}
		}
		scope:max_aptitude_difference > 0
		carnx_$NAME$_aptitude_difference_value = scope:max_aptitude_difference
	}
}

carnx_has_useful_claims_trigger = {
	any_claim = {
		neighboring_useful_courtier_or_guest_claim_trigger = { RULER = $RULER$ }
	}
}

carnx_is_attractive_to_character_trigger = {
	$CHARACTER$ = {
		is_attracted_to_gender_of = prev
	}
	attraction > 0
}

carnx_is_visibly_fertile_female_trigger = {
	is_female = yes
	is_visibly_fertile = yes
}

carnx_is_character_poor_trigger = {
	trigger_if = {
		limit = { ai_has_economical_boom_personality = yes }
		gold <= medium_gold_value
	}
	trigger_else = {
		gold <= minor_gold_value
	}
}

carnx_is_character_rich_trigger = {
	trigger_if = {
		limit = { ai_has_economical_boom_personality = yes }
		short_term_gold >= massive_gold_value
	}
	trigger_else = {
		short_term_gold >= major_gold_value
	}
}

carnx_is_slave_trigger = {
	has_trait = slave
	any_relation = {
		type = slave_owner
		exists = this
	}
}

carnx_is_slave_owner_trigger = {
	any_relation = {
		type = slave
		exists = this
	}
}

carnx_was_enslaved_by_character_trigger = {
	OR = {
		has_opinion_modifier = {
			target = $CHARACTER$
			modifier = carn_enslaved_me_opinion
		}
		has_opinion_modifier = {
			target = $CHARACTER$
			modifier = carn_enslaved_me_crime_opinion
		}
	}
}

carnx_employs_slave_as_court_position_trigger = {
	employs_court_position = $TYPE$
	any_court_position_holder = {
		type = $TYPE$
		has_trait = slave
		has_relation_slave_owner = prev
	}
}

carnx_is_slave_employment_enabled_trigger = {
	OR = {
		faith = { has_doctrine_parameter = carnx_slave_employment_active }
		has_government = clan_government
		has_government = tribal_government
		has_character_modifier = carnx_slavery_attitude_employer_modifier
	}
}

carnx_is_employed_slaves_more_loyal_enabled_trigger = {
	OR = {
		faith = { has_doctrine_parameter = carnx_employed_slaves_more_loyal_active }
		has_government = clan_government
		has_government = tribal_government
		has_character_modifier = carnx_slavery_attitude_employer_modifier
	}
}

carnx_is_slave_concubines_enabled_trigger = {
	carnx_is_polygamous_faith_or_culture_trigger = yes
}

carnx_is_slave_soldiers_enabled_trigger = {
	OR = {
		faith = { has_doctrine_parameter = carnx_slave_soldiers_active }
		has_government = clan_government
		has_character_modifier = carnx_slavery_attitude_employer_modifier
	}
}

carnx_is_slave_eunuchs_enabled_trigger = {
	OR = {
		AND = {
			carnx_is_polygamous_faith_or_culture_trigger = yes
			OR = {
				has_government = clan_government
				has_character_modifier = carnx_slavery_attitude_employer_modifier
			}
		}
		culture = { has_cultural_parameter = can_appoint_chief_eunuch }
	}
}

carnx_is_polygamous_faith_or_culture_trigger = {
	OR = {
		faith = { has_doctrine = doctrine_polygamy }
		faith = { has_doctrine = doctrine_concubines }
		culture = { has_cultural_tradition = tradition_polygamous }
		culture = { has_cultural_tradition = tradition_concubines }
		# Faith and culture parameters from Extended Marriage Doctrines
		faith = { has_doctrine_parameter = allows_polygamy }
		faith = { has_doctrine_parameter = allows_concubinage }
		culture = { has_cultural_parameter = allows_polygamy }
		culture = { has_cultural_parameter = allows_concubinage }
	}
}

carnx_is_landed_or_family_trigger = {
	OR = {
		is_landed = yes
		any_spouse = { is_landed = yes }
		any_close_family_member = { is_landed = yes }
	}
}

carnx_slavery_attitude_slaver_government_trigger = {
	has_government = tribal_government
}

carnx_slavery_attitude_liberator_government_trigger = {
	has_government = theocracy_government
}

carnx_slavery_attitude_trader_government_trigger = {
	has_government = republic_government
}

carnx_slavery_attitude_employer_government_trigger = {
	has_government = clan_government
}

carnx_slavery_attitude_slaver_faith_culture_trigger = {
	has_game_rule = carnx_universe_historical
	faith = {
		religion = { is_in_family = rf_pagan }
	}
}

carnx_slavery_attitude_liberator_faith_culture_trigger = {
	has_game_rule = carnx_universe_historical
	faith = {
		OR = {
			religion = religion:christianity_religion
			religion = religion:buddhism_religion
			religion = religion:jainism_religion
			religion = religion:taoism_religion
		}
	}
}

carnx_slavery_attitude_trader_faith_culture_trigger = {
	has_game_rule = carnx_universe_historical
	faith = {
		OR = {
			religion = religion:christianity_religion
			religion = religion:islam_religion
			religion = religion:judaism_religion
		}
	}
}

carnx_slavery_attitude_employer_faith_culture_trigger = {
	has_game_rule = carnx_universe_historical
	faith = {
		OR = {
			has_doctrine_parameter = carnx_slave_employment_active
			religion = religion:islam_religion
			religion = religion:judaism_religion
			religion = religion:zoroastrianism_religion
		}
	}
}

carnx_is_declining_to_free_illegal_slaves_crime_trigger = {
	has_character_modifier = carnx_slavery_attitude_liberator_modifier
}
