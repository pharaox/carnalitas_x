carn_on_slave_enslaved = {
	effect = {
		create_character_memory = {
			type = carnx_enslaved_memory
			participants = {
				enslaver = scope:new_owner
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_enslaved }
	}
}

carn_on_slave_freed = {
	effect = {
		create_character_memory = {
			type = carnx_freed_memory
			participants = {
				emancipator = scope:former_owner
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_freed }
	}
}

carnx_on_slave_bought = {
	effect = {
		create_character_memory = {
			type = carnx_bought_memory
			participants = {
				buyer = scope:buyer
			}
		}
		if = {
			limit = { exists = scope:recipient }
			save_temporary_scope_value_as = { name = source value = flag:interaction }
		}
		else = {
			save_temporary_scope_value_as = { name = source value = flag:event }
		}
		carnx_debug_log_4_effect = {
			MSG = carnx_debug_msg_slave_bought
			NAME1 = buyer TYPE1 = flag:character
			NAME2 = seller TYPE2 = flag:character
			NAME3 = slave_price TYPE3 = flag:value
			NAME4 = source TYPE4 = flag:flag
		}
	}
}

carnx_on_slave_seized = {
	effect = {
		create_character_memory = {
			type = carnx_seized_memory
			participants = {
				seizer = scope:new_owner
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_seized }
	}
}

carnx_on_slave_ransomed = {
	effect = {
		create_character_memory = {
			type = carnx_ransomed_memory
			participants = {
				ransomer = scope:payer
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_ransomed }
	}
}

carnx_on_slave_gifted = {
	effect = {
		create_character_memory = {
			type = carnx_gifted_memory
			participants = {
				new_owner = scope:new_owner
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_gifted }
	}
}

carnx_on_slave_escaped = {
	effect = {
		create_character_memory = {
			type = carnx_escaped_memory
			participants = {
				former_owner = scope:former_owner
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_escaped }
	}
}

carnx_on_slave_liberated = {
	effect = {
		create_character_memory = {
			type = carnx_liberated_memory
			participants = {
				liberator = scope:liberator
			}
		}
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_liberated }
	}
}

carnx_on_slave_sold_off = {
	effect = {
		carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_sold_off }
	}
}

# Fires when a character joins a court. Not fired for just generated characters
# Root is the character
# scope:new_employer is their new employer
# scope:old_employer is their old employer (if they had one; otherwise unset)
on_join_court = {
	on_actions = { carnx_on_join_court }
}

carnx_on_join_court = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_character_joined_court }

		# Return slaves to their owners, sell off or free slaves owned by courtiers
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
		else_if = {
			limit = {
				carnx_is_slave_owner_trigger = yes
				# Don't sell off or free slaves if added to court temporarily after being destroyed as LAAMP
				NOT = { has_variable = carnx_destroyed_laamp }
			}
			every_relation = {
				type = slave
				carnx_sell_off_or_free_slave_effect = yes
			}
		}
	}
}

# Fires when a character leaves a court. Not fired when leaving due to death or similar
# Will still fire even if on_join_court is firing (fires just before it)
# Root is the character
# scope:old_employer is their old employer
on_leave_court = {
	on_actions = { carnx_on_leave_court }
}

carnx_on_leave_court = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_character_left_court }

		# Return slaves to their owners
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
	}
}

# Called when a pool character has appeared at the court. See guest_management in common/courtier_guest_management.
# root, scope:guest: the guest
# host: their host (owner of the court)
# characters: list of all characters moving together. Includes the root character.
on_guest_arrived_from_pool = {
	on_actions = { carnx_on_guest_arrived_from_pool }
}

carnx_on_guest_arrived_from_pool = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_guest_arrived_from_pool }

		# Return slaves to their owners, sell off or free slaves owned by guests
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
		else_if = {
			limit = { carnx_is_slave_owner_trigger = yes }
			every_relation = {
				type = slave
				carnx_sell_off_or_free_slave_effect = yes
			}
		}
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	on_actions = { carnx_on_title_gain }
}

carnx_on_title_gain = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_character_gained_title }

		# Ensure slaves join their owner's court
		every_relation = {
			type = slave
			carnx_return_slave_to_owner_effect = yes
		}
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	on_actions = { carnx_on_title_lost }
}

carnx_on_title_lost = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_character_lost_title }

		# Ensure slaves follow their owner
		every_relation = {
			type = slave
			carnx_return_slave_to_owner_effect = yes
		}
	}
}

# Code on-action: character being imprisoned in root scope
# imprisoning character set as scope:imprisoner
on_imprison = {
	on_actions = { carnx_on_imprison }
}

carnx_on_imprison = {
	effect = {
		if = {
			limit = {
				NOT = { has_trait = slave }
			}
			carnx_debug_log_effect = { MSG = carnx_debug_msg_non_slave_imprisoned }
		}

		# Return slaves to their owners
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
		else_if = {
			limit = { carnx_is_slave_owner_trigger = yes }
			every_relation = {
				type = slave
				carnx_return_slave_to_owner_effect = yes
			}
		}
	}
}

# Code on-action: character released from prison in root scope. Does not fire when "released" due to dying
# imprisoning character set as scope:imprisoner
on_release_from_prison = {
	on_actions = { carnx_on_release_from_prison }
}

carnx_on_release_from_prison = {
	effect = {
		if = {
			limit = {
				NOT = { has_trait = slave }
			}
			carnx_debug_log_effect = { MSG = carnx_debug_msg_non_slave_released_from_prison }
		}

		# Return slaves to their owners
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
		else_if = {
			limit = { carnx_is_slave_owner_trigger = yes }
			every_relation = {
				type = slave
				carnx_return_slave_to_owner_effect = yes
			}
		}
	}
}

# Called from code once a year for all characters, at a random point that year (individually for each character)
# Root is the character
random_yearly_everyone_pulse = {
	on_actions = { carnx_random_yearly_everyone_pulse }
}

carnx_random_yearly_everyone_pulse = {
	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_character_yearly_pulse }

		# Return slaves to their owners
		if = {
			limit = { carnx_is_slave_trigger = yes }
			carnx_return_slave_to_owner_effect = yes
		}
		else_if = {
			limit = { carnx_is_slave_owner_trigger = yes }
			every_relation = {
				type = slave
				carnx_return_slave_to_owner_effect = yes
			}
		}

		# Sell off random slave if merchant
		if = {
			limit = {
				is_alive = yes
				has_variable = at_merchant_type
			}
			random = {
				chance = 50
				random_relation = {
					type = slave
					carnx_debug_log_effect = { MSG = carnx_debug_msg_selling_off_slave }
					carnx_sell_off_slave_effect = yes
				}
			}
		}
	}
}

# Called every Jan 1st
# Root does not exist
yearly_global_pulse = {
	on_actions = { carnx_yearly_global_pulse }
}

carnx_yearly_global_pulse = {
	trigger = {
		debug_only = yes
	}
	effect = {
		carnx_debug_log_effect = { MSG = carnx_debug_msg_checking_slaves }
		every_living_character = {
			limit = { carnx_is_slave_trigger = yes }
			if = {
				limit = { carnx_is_valid_slave_trigger = no }
				carnx_debug_log_effect = { MSG = carnx_debug_msg_invalid_slave_detected }
			}
			if = {
				limit = { carnx_is_slave_owner_trigger = yes }
				carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_owning_slaves_detected }
			}
		}
	}
}

# Code on-action: character changes faith. Not called when a character gets a faith on birth, creation, and similar
# Root is the character
# scope:old_faith is the faith they used to have
on_character_faith_change = {
	on_actions = { carnx_on_character_faith_change }
}

carnx_on_character_faith_change = {
	effect = {
		if = {
			limit = {
				has_trait = slave
				any_relation = {
					type = slave_owner
					save_temporary_scope_as = owner
				}
				exists = scope:owner
				faith = scope:owner.faith
			}
			carnx_debug_log_effect = { MSG = carnx_debug_msg_slave_converted }
		}
	}
}

on_set_relation_rival = {
	on_actions = { carnx_on_set_relation_rival }
}

carnx_on_set_relation_rival = {
	effect = {
		if = {
			limit = {
				exists = scope:target
				carnx_was_enslaved_by_character_trigger = { CHARACTER = scope:target }
			}
			carnx_debug_log_effect = { MSG = carnx_debug_msg_character_became_enslavers_rival }
		}
	}
}
